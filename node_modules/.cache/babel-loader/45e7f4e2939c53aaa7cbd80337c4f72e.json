{"ast":null,"code":"import { createContext, createElement, useContext } from 'react';\nvar defaultMissingProviderMessage = 'The hook for this context cannot be used outside of its Provider';\n/**\r\n * A function for generating a Provider and Hook for a React Context\r\n *\r\n * @arg useGetContextValue - A custom hook function used to get the `value` prop passed to the generated Provider\r\n * @arg options - Additional options for generating the Context\r\n */\n\nfunction generateContext(useGetContextValue, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      defaultContext = _options.defaultContext,\n      _options$requireProvi = _options.requireProvider,\n      requireProvider = _options$requireProvi === void 0 ? true : _options$requireProvi,\n      _options$missingProvi = _options.missingProviderMessage,\n      missingProviderMessage = _options$missingProvi === void 0 ? defaultMissingProviderMessage : _options$missingProvi;\n  /**\r\n   * Creates a Context in closure\r\n   */\n\n  var Ctx = createContext(defaultContext);\n  /**\r\n   * The Provider with which to use this Context\r\n   */\n\n  var Provider = function Provider(props) {\n    var value = useGetContextValue(props);\n    return createElement(Ctx.Provider, {\n      value: value\n    }, props.children);\n  };\n  /**\r\n   * The hook for consuming the generated Context\r\n   */\n\n\n  var useThisContext = function useThisContext() {\n    var context = useContext(Ctx);\n\n    if (requireProvider && context === undefined) {\n      throw new Error(missingProviderMessage);\n    }\n\n    return context;\n  };\n\n  return [Provider, useThisContext];\n}\n\nexport default generateContext;","map":{"version":3,"sources":["../src/index.tsx"],"names":["defaultMissingProviderMessage","generateContext","useGetContextValue","options","defaultContext","requireProvider","missingProviderMessage","Ctx","React","Provider","value","props","useThisContext","context"],"mappings":";AAgBA,IAAMA,6BAA6B,GAAnC,kEAAA;AAGA;;;;;;;SAMwBC,e,CACtBC,kB,EACAC,O,EAAAA;MAAAA,OAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,OAAAA,GAA4B,EAA5BA;;;AAEA,MAAA,QAAA,GAAA,OAAA;AAAA,MACEC,cADF,GAAA,QAAA,CAAA,cAAA;AAAA,MAAA,qBAAA,GAAA,QAAA,CAAA,eAAA;AAAA,MAEEC,eAFF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAAA,QAAA,CAAA,sBAAA;AAAA,MAGEC,sBAHF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,6BAAA,GAAA,qBAAA;AAMA;;;;AAGA,MAAMC,GAAG,GAAGC,aAAAA,CAAZ,cAAYA,CAAZ;AAEA;;;;AAGA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA;AACf,QAAMC,KAAK,GAAGR,kBAAkB,CAAhC,KAAgC,CAAhC;AAEA,WAAO,aAAA,CAACK,GAAG,CAAJ,QAAA,EAAA;AAAcG,MAAAA,KAAK,EAAEA;AAArB,KAAA,EAA6BC,KAAK,CAAzC,QAAO,CAAP;AAHF,GAAA;AAMA;;;;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAA;AACrB,QAAMC,OAAO,GAAGL,UAAAA,CAAhB,GAAgBA,CAAhB;;AAEA,QAAIH,eAAe,IAAIQ,OAAO,KAA9B,SAAA,EAA8C;AAC5C,YAAM,IAAA,KAAA,CAAN,sBAAM,CAAN;AACD;;AAED,WAAA,OAAA;AAPF,GAAA;;AAUA,SAAO,CAAA,QAAA,EAAP,cAAO,CAAP;AACD","sourcesContent":["import * as React from 'react'\n\ntype Children = { children: React.ReactNode }\n\ntype UseGetContextValue<Props, Context> = (props: Props) => Context\n\ntype Options<Context> = {\n  defaultContext?: Context\n  requireProvider?: boolean\n  missingProviderMessage?: string\n}\n\ntype Provider<Props> = (props: Props & Children) => JSX.Element\n\ntype Hook<Context> = () => Context | undefined\n\nconst defaultMissingProviderMessage =\n  'The hook for this context cannot be used outside of its Provider'\n\n/**\n * A function for generating a Provider and Hook for a React Context\n *\n * @arg useGetContextValue - A custom hook function used to get the `value` prop passed to the generated Provider\n * @arg options - Additional options for generating the Context\n */\nexport default function generateContext<Props, Context>(\n  useGetContextValue: UseGetContextValue<Props, Context>,\n  options: Options<Context> = {}\n): [Provider<Props>, Hook<Context>] {\n  const {\n    defaultContext,\n    requireProvider = true,\n    missingProviderMessage = defaultMissingProviderMessage,\n  } = options\n\n  /**\n   * Creates a Context in closure\n   */\n  const Ctx = React.createContext(defaultContext)\n\n  /**\n   * The Provider with which to use this Context\n   */\n  const Provider = (props: Props & Children) => {\n    const value = useGetContextValue(props)\n\n    return <Ctx.Provider value={value}>{props.children}</Ctx.Provider>\n  }\n\n  /**\n   * The hook for consuming the generated Context\n   */\n  const useThisContext = () => {\n    const context = React.useContext(Ctx)\n\n    if (requireProvider && context === undefined) {\n      throw new Error(missingProviderMessage)\n    }\n\n    return context\n  }\n\n  return [Provider, useThisContext]\n}\n"]},"metadata":{},"sourceType":"module"}